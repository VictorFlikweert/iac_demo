#!/usr/bin/env python3
"""
Generate derived CFEngine data from topology.json.

This script transforms the JSON topology description into a CFEngine
bundle that exposes host-specific package lists, broadcast targets,
and MOTD metadata. The generated file is consumed by promises.cf.
"""

from __future__ import annotations

import json
import os
import re
import sys
from pathlib import Path
from typing import Iterable, List, Sequence

RE_CANON = re.compile(r"[^A-Za-z0-9_]")


def canonify(name: str) -> str:
    """Return a CFEngine-safe identifier derived from ``name``."""
    return RE_CANON.sub("_", name.lower())


def cf_quote(value: str) -> str:
    """Render a CFEngine-compatible quoted string."""
    escaped = value.replace("\\", "\\\\").replace('"', '\\"')
    return f'"{escaped}"'


def cf_slist(items: Sequence[str]) -> str:
    """Render a CFEngine-style string list."""
    seq = list(items)
    if not seq:
        return "{}"
    return "{ " + ", ".join(cf_quote(item) for item in seq) + " }"


def dedupe(seq: Iterable[str]) -> List[str]:
    """Return ``seq`` preserving order while removing duplicates."""
    seen = set()
    result = []
    for item in seq:
        if item not in seen:
            seen.add(item)
            result.append(item)
    return result


def ensure_parent_dirs(path: Path) -> None:
    """Create parent directory if missing."""
    path.parent.mkdir(parents=True, exist_ok=True)


def main() -> int:
    root = Path(__file__).resolve().parent
    topology_path = root / "topology.json"
    output_path = root / "services" / "generated_topology.cf"

    if not topology_path.exists():
        print(f"[cfengine] topology file missing: {topology_path}", file=sys.stderr)
        return 1

    data = json.loads(topology_path.read_text(encoding="utf-8"))

    defaults = data.get("defaults", {})
    role_defs = data.get("roles", {})
    host_defs = data.get("hosts", {})

    baseline_packages = defaults.get("packages", [])
    broadcast_message = defaults.get("broadcast_message", "")
    motd_path = defaults.get("motd_path", "/etc/motd")
    motd_title = defaults.get("motd_title", "CFEngine Demo")

    directories = set()
    host_entries = []

    for host_name, host_cfg in host_defs.items():
        host_id = canonify(host_name)
        roles = host_cfg.get("roles", [])
        friendly_roles = [
            role_defs.get(role, {}).get("motd_label", role.replace("_", " ").title())
            for role in roles
        ]
        motd_header = host_cfg.get("motd_header") or " â€¢ ".join(friendly_roles) or host_name

        role_packages = []
        broadcast_path = None
        for role in roles:
            role_entry = role_defs.get(role, {})
            role_packages.extend(role_entry.get("packages", []))
            candidate = role_entry.get("broadcast_path")
            if candidate:
                broadcast_path = candidate

        packages = dedupe(list(baseline_packages) + role_packages)

        if broadcast_path:
            path_obj = Path(broadcast_path)
            directories.add(str(path_obj.parent))
            if path_obj.parent.parent is not None:
                directories.add(str(path_obj.parent.parent))

        host_entries.append(
            {
                "name": host_name,
                "id": host_id,
                "roles": roles,
                "friendly_roles": friendly_roles,
                "friendly_roles_line": ", ".join(friendly_roles) if friendly_roles else "Unassigned",
                "motd_header": motd_header,
                "packages": packages,
                "broadcast_path": broadcast_path,
            }
        )

    directories = sorted(directories)
    host_entries.sort(key=lambda item: item["name"])

    lines = [
        "# This file is generated by render_topology.py. Do not edit manually.",
        "bundle common cfengine_demo_generated",
        "{",
        "  vars:",
        f'      "hosts" slist => {cf_slist([entry["id"] for entry in host_entries])};',
        f'      "broadcast_message" string => {cf_quote(broadcast_message)};',
        f'      "motd_path" string => {cf_quote(motd_path)};',
        f'      "motd_title" string => {cf_quote(motd_title)};',
        f'      "managed_directories" slist => {cf_slist(directories)};',
    ]

    for entry in host_entries:
        host_id = entry["id"]
        lines.extend(
            [
                f'      "host_display[{host_id}]" string => {cf_quote(entry["name"])};',
                f'      "roles[{host_id}]" slist => {cf_slist(entry["roles"])};',
                f'      "motd_roles[{host_id}]" slist => {cf_slist(entry["friendly_roles"])};',
                f'      "motd_roles_line[{host_id}]" string => {cf_quote(entry["friendly_roles_line"])};',
                f'      "motd_header[{host_id}]" string => {cf_quote(entry["motd_header"])};',
                f'      "packages[{host_id}]" slist => {cf_slist(entry["packages"])};',
            ]
        )
        if entry["broadcast_path"]:
            lines.append(
                f'      "broadcast_target[{host_id}]" string => {cf_quote(entry["broadcast_path"])};'
            )

    lines.append("}")
    lines.append("")

    ensure_parent_dirs(output_path)
    output_path.write_text("\n".join(lines), encoding="utf-8")
    return 0


if __name__ == "__main__":
    sys.exit(main())
